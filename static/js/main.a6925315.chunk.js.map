{"version":3,"sources":["components/Panel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["isMobile","window","innerWidth","chartHeight","innerHeight","barSize","undefined","labelAngle","chartMargins","top","right","bottom","left","formatDate","d","moment","format","renderLabel","value","Panel","props","width","height","data","margin","style","fontSize","color","fontWeight","letterSpacing","dataKey","tickFormatter","interval","angle","textAnchor","stroke","labelFormatter","contentStyle","background","isAnimationActive","strokeDasharray","vertical","verticalAlign","wrapperStyle","fill","stackId","position","className","content","x","label","state","this","getData","fetch","responseConfirmed","responseRecovered","responseDeaths","json","dataConfirmed","dataRecovered","dataDeaths","map","i","result","Object","assign","Confirmed","Cases","Recovered","Deaths","setState","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a6925315.chunk.js","sourcesContent":["import React, {ReactText} from \"react\";\r\nimport {\r\n  Bar,\r\n  CartesianGrid,\r\n  ComposedChart,\r\n  LabelList,\r\n  Legend,\r\n  ReferenceLine,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis\r\n} from 'recharts';\r\nimport moment from \"moment\";\r\nimport './Panel.css';\r\n\r\nconst isMobile = window.innerWidth < 750;\r\nconst textColor = '#c5c5c5';\r\nconst chartHeight = isMobile ? window.innerHeight/2 : 600;\r\nconst barSize = isMobile ? 2 : undefined;\r\nconst labelAngle = isMobile ? 90 : 45;\r\nconst chartMargins = isMobile\r\n\t? {top: 15, right: 10, bottom: 35, left: -20}\r\n\t: {top: 15, right: 30, bottom: 35, left: 0};\r\nconst formatDate = (d: ReactText) => {\r\n  return moment(d).format('DD.MM');\r\n};\r\nconst red = '#ff7f7f';\r\nconst yellow = '#efdea4';\r\nconst green = '#009090';\r\n\r\nconst renderLabel = (d: any) => {\r\n  return d.value || '';\r\n};\r\n\r\nfunction Panel(props: any) {\r\n\r\n  // @ts-ignore\r\n  return (\r\n\t  <div>\r\n\t\t<h3>2020 Romanian COVID-19 cases</h3>\r\n\t\t<ResponsiveContainer width={'100%'} height={chartHeight}>\r\n\t\t  <ComposedChart\r\n\t\t\t  data={props.data}\r\n\t\t\t  margin={chartMargins}\r\n\t\t\t  style={{\r\n\t\t\t\tfontSize: isMobile ? 10 : 12,\r\n\t\t\t\tcolor: textColor,\r\n\t\t\t\tfontWeight: isMobile ? 300 : 400,\r\n\t\t\t\tletterSpacing: 0.2,\r\n\t\t\t  }}>\r\n\t\t\t<XAxis dataKey=\"Date\" tickFormatter={formatDate} interval={0} angle={labelAngle} textAnchor={'start'}\r\n\t\t\t\t   stroke={textColor} />\r\n\t\t\t<YAxis stroke={textColor} />\r\n\t\t\t<Tooltip labelFormatter={formatDate}\r\n\t\t\t\t\t contentStyle={{color: textColor, background: '#373737'}}\r\n\t\t\t\t\t isAnimationActive={false} />\r\n\t\t\t<CartesianGrid stroke={textColor} strokeDasharray={'4 4'} vertical={false} />\r\n\t\t\t<Legend verticalAlign={'bottom'} wrapperStyle={{bottom: 0}} />\r\n\t\t\t<Bar dataKey={'Recovered'} fill={green} stackId={'a'} barSize={barSize}>\r\n\t\t\t  <LabelList dataKey={'Recovered'} position={'insideTop'} className={'label'}\r\n\t\t\t\t\t\t content={renderLabel} />\r\n\t\t\t</Bar>\r\n\t\t\t<Bar dataKey={'Deaths'} fill={red} stackId={'a'} barSize={barSize}>\r\n\t\t\t  <LabelList dataKey={'Deaths'} position={'outside'} className={'label'}\r\n\t\t\t\t\t\t content={renderLabel} />\r\n\t\t\t</Bar>\r\n\t\t\t<Bar dataKey={'Confirmed'} fill={yellow} stackId={'a'} barSize={barSize}>\r\n\t\t\t  <LabelList dataKey={'Confirmed'} position={'insideTop'} className={'label'}\r\n\t\t\t\t\t\t content={renderLabel} />\r\n\t\t\t</Bar>\r\n\t\t\t<ReferenceLine x={29} stroke={yellow} label=\"Full lockdown\" className={'label-reference'} />\r\n\t\t\t<ReferenceLine x={26} stroke={red} label=\"First deaths\" className={'label-reference'} />\r\n\t\t\t<ReferenceLine x={20} stroke={yellow} label=\"Emergency state\" className={'label-reference'} />\r\n\t\t\t<ReferenceLine x={8} stroke={green} label=\"First recoveries\" className={'label-reference'} />\r\n\t\t\t{/*<Line type=\"monotone\" dataKey=\"Cases\" stroke=\"#009090\" />*/}\r\n\t\t  </ComposedChart>\r\n\t\t</ResponsiveContainer>\r\n\t  </div>\r\n  );\r\n}\r\n\r\nexport default Panel;\r\n","import React from 'react';\nimport './App.css';\nimport Panel from \"./components/Panel\";\n\nexport default class extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      data: [],\n    };\n  }\n\n  componentWillMount() {\n    this.getData();\n  }\n\n  async getData() {\n    // confirmed, recovered, deaths\n    const responseConfirmed: any = await fetch('https://api.covid19api.com/country/romania/status/confirmed/live');\n    const responseRecovered: any = await fetch('https://api.covid19api.com/country/romania/status/recovered/live');\n    const responseDeaths: any = await fetch('https://api.covid19api.com/country/romania/status/deaths/live');\n    const dataConfirmed: any = await responseConfirmed.json();\n    const dataRecovered: any = await responseRecovered.json();\n    const dataDeaths: any = await responseDeaths.json();\n\n    const data = dataConfirmed.map((d: any, i: number) => {\n      const result = Object.assign({}, d);\n      result.Confirmed = d.Cases;\n      result.Recovered = dataRecovered[i].Cases;\n      result.Deaths = dataDeaths[i].Cases;\n\n      return result;\n    });\n\n    this.setState({data});\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          <Panel data={this.state.data} />\n        </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}