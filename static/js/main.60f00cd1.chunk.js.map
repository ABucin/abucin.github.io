{"version":3,"sources":["components/Status.tsx","components/Panel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["red","isMobile","window","innerWidth","computeNumberColor","diff","reverse","statusStyle","fontSize","display","alignItems","justifyContent","margin","Status","props","currentCount","previousCount","percent","Math","trunc","sign","className","style","text","color","htmlColor","computeIcon","chartLayout","chartWidth","undefined","chartMargins","top","right","bottom","left","chartTheme","axis","ticks","line","stroke","fill","fontFamily","labels","fontWeight","legends","textShadow","grid","strokeWidth","strokeDasharray","tooltip","container","background","border","formatDate","d","moment","format","generateMarker","value","legend","lineStyle","textStyle","chartTooltip","t","data","Date","Confirmed","Deaths","Recovered","labelTextColor","c","id","axisBottom","tickRotation","axisTop","axisLeft","children","label","map","i","MenuItem","key","Panel","barChart","this","keys","colors","indexBy","layout","labelSkipHeight","labelSkipWidth","enableGridX","enableGridY","theme","markers","itemTextColor","dataFrom","anchor","direction","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","height","width","type","FormControl","minWidth","textAlign","InputLabel","Select","labelId","onChange","onTypeChange","current","previous","renderChart","React","Component","darkTheme","createMuiTheme","palette","primary","dark","light","main","typography","join","state","rawConfirmed","rawRecovered","rawDeaths","chartType","bind","error","errorInfo","console","log","getData","isTotal","result","Object","assign","Cases","length","push","add","toString","setState","e","target","parseData","fetch","responseConfirmed","responseRecovered","responseDeaths","json","dataConfirmed","dataRecovered","dataDeaths","ThemeProvider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"kcAOMA,EAAM,UAGNC,EAAWC,OAAOC,WAAa,IAgB/BC,EAAqB,SAACC,EAAcC,GAWxC,OARID,EAAO,EACEC,EArBD,UAqBmBN,EACpBK,EAAO,EACLC,EAAUN,EAvBX,UADC,WAgCTO,EAAcN,EAAW,CAC7BO,SAAUP,EAAW,GAAK,GAC1BQ,QAAS,OACTC,WAAY,SACZC,eAAgB,UACd,CAACC,OAAQ,GAgBEC,MAdf,SAAgBC,GACd,IAAMT,EAAgBS,EAAMC,aAAeD,EAAME,eAAkB,EAE7DC,EAAmBC,KAAKC,MAAa,IAAPd,EAAaS,EAAME,cAAgB,IAAM,IAAO,EAC9EI,EAAef,EAAO,EAAI,IAAM,GAEtC,OACC,0BAAMgB,UAAW,SAAUC,MAAOf,GAClCO,EAAMS,KADN,KACcT,EAAMC,aADpB,KACmC,0BAAMO,MAAO,CAACE,MAAOpB,EAAmBC,EAAMS,EAAMR,WAAYc,EAAMf,EAAtE,MAA+Ee,EAAMH,EAArF,KADnC,IA1CiB,SAACZ,EAAcC,GAWjC,OARID,EAAO,EACL,kBAAC,IAAD,CAAiBoB,UAAWnB,EAPtB,UAOwCN,IACzCK,EAAO,EACZ,kBAAC,IAAD,CAAmBoB,UAAWnB,EAAUN,EATlC,YAWN,kBAAC,IAAD,CAAYyB,UAZL,YAgDZC,CAAYrB,EAAMS,EAAMR,W,oCC9CrBL,EAAWC,OAAOC,WAAa,IAC/BwB,EAAc1B,EAAW,aAAe,WACxC2B,EAAa3B,EAAWC,OAAOC,gBAAa0B,EAC5CC,EAAe7B,EAClB,CAAC8B,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACvC,CAACH,IAAK,EAAGC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAQnCC,EAAa,CACjBC,KAAM,CACPC,MAAO,CACLC,KAAM,CACPC,OANgB,WAQfhB,KAAM,CACPiB,KATgB,UAUhBC,WAAY,YAIZC,OAAQ,CACTnB,KAAM,CACJkB,WAAY,SACZE,WAAY,MAGbC,QAAS,CACVrB,KAAM,CACJsB,WAAY,mBACZJ,WAAY,WAGbK,KAAM,CACPR,KAAM,CACJC,OA5Be,UA6BfQ,YAAa,EACbC,gBAAiB,QAGlBC,QAAS,CACVC,UAAW,CACTC,WApCc,OAqCdC,OAAO,aAAD,OApCS,WAqCf5C,SAAU,GACVqC,WAAY,sBASTQ,EAAa,SAACC,GAClB,OAAOC,IAAOD,GAAGE,OAAO,WAQpBC,EAAiB,SAACC,EAAenB,EAAgBoB,GAAhC,MAAyD,CAC9EvB,KAAMnC,EAAW,IAAM,IACvByD,QACAE,UAAW,CAACrB,SAAQQ,YAAa,GACjCY,SACAE,UAAW,CAACrB,KA7DI,UA6DahC,SAAU,GAAIqC,WAAY,sBAMnDiB,EAAe,SAACC,GACpB,OAAQ,6BACT,2BAAIV,EAAWU,EAAEC,KAAKC,OACtB,uBAAG3C,MAAO,CAACE,MAzEG,YAyEd,cAAuCuC,EAAEC,KAAKE,WAC9C,uBAAG5C,MAAO,CAACE,MA3EA,YA2EX,WAAiCuC,EAAEC,KAAKG,QACxC,uBAAG7C,MAAO,CAACE,MA1EE,YA0Eb,cAAsCuC,EAAEC,KAAKI,aAOxCC,EAAiB,SAACC,GAAD,MAA0B,cAAdA,EAAEN,KAAKO,GAAqB,QAAU,SACnEC,EAAavE,OAAW4B,EAAY,CACxC4C,aAAc,GACdjB,OAAQH,GAEJqB,EAAUzE,EAAW,QAAK4B,EAC1B8C,EAAW1E,EAAW,CAC1BwE,aAAc,GACdjB,OAAQH,QACNxB,EASE+C,EAPI,CAAC,CACTL,GAAI,QACJM,MAAO,SACN,CACDN,GAAI,SACJM,MAAO,WAEUC,KAAI,SAACR,EAAGS,GAAJ,OACtB,kBAACC,EAAA,EAAD,CACCC,IAAKF,EACLrB,MAAOY,EAAEC,IAEPD,EAAEO,UAwGSK,E,kDApGb,WAAYpE,GAAa,uCACpBA,G,0DAIN,IAAMqE,EAAW,kBAAC,IAAD,CAChBnB,KAAMoB,KAAKtE,MAAMkD,KACjBqB,KAAM,CAAC,YAAa,SAAU,aAC9BC,OAAQ,CApHI,UAFF,UACG,WAsHbC,QAAS,OACTC,OAAQ7D,EACR8D,gBAAiB,GACjBC,eAAgB,GAChBC,YAAa1F,EACb2F,aAAc3F,EACdW,OAAQkB,EACR+D,MAAO1D,EACPqC,WAAYA,EACZG,SAAUA,EACVD,QAASA,EACTL,eAAgBA,EAChByB,QAAS,CACPrC,EAAexD,EAAW,uBAAyB,uBAlIzC,UAkIwE,oBAClFwD,EAAexD,EAAW,uBAAyB,uBApIxC,UAoIwE,mBACnFwD,EAAexD,EAAW,uBAAyB,uBAtI3C,UAsIwE,gBAChFwD,EAAexD,EAAW,uBAAyB,uBAtIxC,UAsIwE,kBAErFgD,QAASa,EACTlB,QAAS,CACP,CACDmD,cAxIe,UAyIfC,SAAU,OACVC,OAAQ,SACRC,UAAW,MACXC,WAAY,EACZC,WAAY,GACZC,aAAc,EACdC,UAAW,GACXC,WAAY,GACZC,cAAe,gBACfC,YAAa,IACbC,WAAY,GACZC,QAAS,CACP,CACDC,GAAI,QACJtF,MAAO,CACLmF,YAAa,SAgBlB,OAAQ,yBAAKpF,UAAW,QAASC,MAAO,CAACuF,OAAQ,IAAKC,MAAOlF,KAC1DwD,KAAKtE,MAAMiG,KAAoB5B,M,+BAMlC,OACC,6BACE,4DACA,yBAAK7D,MAAO,CAACV,OAAQ,IACtB,kBAACoG,EAAA,EAAD,CAAa1F,MAAO,CAAC2F,SAAUhH,EAAW,MAAQ,IAAKiH,UAAW,SAChE,kBAACC,EAAA,EAAD,CAAY5C,GAAG,cAAf,gBACA,kBAAC6C,EAAA,EAAD,CAAQC,QAAS,aAAc3D,MAAO0B,KAAKtE,MAAMiG,KAAMnC,SAAUA,EAAU0C,SAAUlC,KAAKtE,MAAMyG,gBAElG,kBAAC,EAAD,CACChG,KAAM,mBACNR,aAAcqE,KAAKtE,MAAM0G,QAAQtD,UACjClD,cAAeoE,KAAKtE,MAAM2G,SAASvD,YAEpC,kBAAC,EAAD,CACC3C,KAAM,gBACNR,aAAcqE,KAAKtE,MAAM0G,QAAQrD,OACjCnD,cAAeoE,KAAKtE,MAAM2G,SAAStD,SAEpC,kBAAC,EAAD,CACC7D,SAAS,EACTiB,KAAM,mBACNR,aAAcqE,KAAKtE,MAAM0G,QAAQpD,UACjCpD,cAAeoE,KAAKtE,MAAM2G,SAASrD,aAGlCgB,KAAKsC,mB,GA/FUC,IAAMC,W,kBCvHpBC,EAAYC,YAAe,CAC/BC,QAAS,CACPC,QAAS,CACVC,KAAM,UACNC,MAAO,UACJC,KAAM,WAEXpB,KAAM,OACNxF,KAAM,CACJyG,QAAS,WAEX7E,WAAY,IAIXiF,WAAY,CACb3F,WAAY,CAAC,UAAU4F,KAAK,Q,oDAK3B,WAAYvH,GAAa,IAAD,8BACzB,cAAMA,IAEDwH,MAAQ,CACXtE,KAAM,GACNwD,QAAS,GACTC,SAAU,GACVc,aAAc,GACdC,aAAc,GACdC,UAAW,GACXC,UAAW,UAEb,EAAKnB,aAAe,EAAKA,aAAaoB,KAAlB,gBAZK,E,8DAeNC,EAAYC,GAE/BC,QAAQC,IAAIH,K,2CAIZxD,KAAK4D,Y,kCAGS,IAAD,OACPC,EAAmC,UAAzB7D,KAAKkD,MAAMI,UAErB1E,EAAOoB,KAAKkD,MAAMC,aAAazD,KAAI,SAACxB,EAAQyB,GAChD,IAAMmE,EAASC,OAAOC,OAAO,GAAI9F,GAKjC,OAJA4F,EAAOhF,WAAa+E,GAAWlE,EAAI,EAAI,EAAKuD,MAAMC,aAAaxD,GAAGsE,MAAQ,EAAKf,MAAMC,aAAaxD,EAAI,GAAGsE,MAAQ,EAAKf,MAAMC,aAAaxD,GAAGsE,MAC5IH,EAAO9E,WAAa6E,GAAWlE,EAAI,EAAI,EAAKuD,MAAME,aAAazD,GAAGsE,MAAQ,EAAKf,MAAME,aAAazD,EAAI,GAAGsE,MAAQ,EAAKf,MAAME,aAAazD,GAAGsE,MAC5IH,EAAO/E,QAAU8E,GAAWlE,EAAI,EAAI,EAAKuD,MAAMG,UAAU1D,GAAGsE,MAAQ,EAAKf,MAAMG,UAAU1D,EAAI,GAAGsE,MAAQ,EAAKf,MAAMG,UAAU1D,GAAGsE,MAEzHH,KAGH1B,EAAU2B,OAAOC,OAAO,GAAIpF,EAAKA,EAAKsF,OAAS,IAC/C7B,EAAW0B,OAAOC,OAAO,GAAIpF,EAAKA,EAAKsF,OAAS,IAGtDtF,EAAKuF,KAAK,CACRtF,KAAMV,MAASiG,IAAI,EAAG,KAAKC,aAG7BrE,KAAKsE,SAAS,CAAC1F,OAAMwD,UAASC,e,mCAGhBkC,GACdvE,KAAKsE,SAAS,CACZhB,UAAWiB,EAAEC,OAAOlG,QAEtB0B,KAAKyE,c,0KAKgCC,MAAM,oE,cAArCC,E,gBAC+BD,MAAM,oE,cAArCE,E,gBAC4BF,MAAM,iE,cAAlCG,E,iBAC2BF,EAAkBG,O,eAA7CC,E,iBAC2BH,EAAkBE,O,eAA7CE,E,iBACwBH,EAAeC,O,QAAvCG,E,OAENjF,KAAKsE,SAAS,CACZnB,aAAc4B,EACd3B,aAAc4B,EACd3B,UAAW4B,IAGbjF,KAAKyE,Y,sIAIL,OACC,kBAACS,EAAA,EAAD,CAAezE,MAAOgC,GACpB,yBAAKxG,UAAU,OAChB,kBAAC,EAAD,CAAO2C,KAAMoB,KAAKkD,MAAMtE,KACpBwD,QAASpC,KAAKkD,MAAMd,QACpBC,SAAUrC,KAAKkD,MAAMb,SACrBF,aAAcnC,KAAKmC,aACnBR,KAAM3B,KAAKkD,MAAMI,YAErB,yBAAKrH,UAAW,UAAhB,yB,GAnF0BsG,IAAMC,WCff2C,QACW,cAA7BrK,OAAOsK,SAASC,UAEe,UAA7BvK,OAAOsK,SAASC,UAEhBvK,OAAOsK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACLE,QAAQF,MAAMA,EAAM2C,c","file":"static/js/main.60f00cd1.chunk.js","sourcesContent":["import ArrowDropUpIcon from \"@material-ui/icons/ArrowDropUp\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport './Panel.css';\r\n\r\nimport React from \"react\";\r\n\r\nconst red = '#ff7f7f';\r\nconst yellow = '#efdea4';\r\nconst green = '#009090';\r\nconst isMobile = window.innerWidth < 750;\r\n\r\nconst computeIcon = (diff: number, reverse: boolean) => {\r\n  let icon;\r\n\r\n  if (diff > 0) {\r\n\ticon = <ArrowDropUpIcon htmlColor={reverse ? green : red} />;\r\n  } else if (diff < 0) {\r\n\ticon = <ArrowDropDownIcon htmlColor={reverse ? red : green} />;\r\n  } else {\r\n\ticon = <RemoveIcon htmlColor={yellow} />;\r\n  }\r\n\r\n  return icon;\r\n};\r\n\r\nconst computeNumberColor = (diff: number, reverse: boolean) => {\r\n  let numberColor: string = '';\r\n\r\n  if (diff > 0) {\r\n\tnumberColor = reverse ? green : red;\r\n  } else if (diff < 0) {\r\n\tnumberColor = reverse ? red : green;\r\n  } else {\r\n    numberColor = yellow;\r\n  }\r\n\r\n  return numberColor;\r\n};\r\n\r\nconst statusStyle = isMobile ? {\r\n  fontSize: isMobile ? 14 : 12,\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center'\r\n} : {margin: 5};\r\n\r\nfunction Status(props: any) {\r\n  const diff: number = (props.currentCount - props.previousCount) || 0;\r\n  // truncate to 1 decimal\r\n  const percent: number = (Math.trunc(diff * 100 / props.previousCount * 10) / 10) || 0;\r\n  const sign: string = diff > 0 ? '+' : '';\r\n\r\n  return (\r\n\t  <span className={'status'} style={statusStyle}>\r\n\t\t{props.text}: {props.currentCount} (<span style={{color: computeNumberColor(diff, props.reverse)}}>{sign}{diff} / {sign}{percent}%</span>)\r\n\t\t{computeIcon(diff, props.reverse)}\r\n\t  </span>\r\n  );\r\n}\r\n\r\nexport default Status;\r\n","import React, {ReactText} from \"react\";\r\nimport moment from \"moment\";\r\nimport './Panel.css';\r\nimport {ResponsiveBar} from '@nivo/bar';\r\nimport {ResponsiveLine} from '@nivo/line';\r\nimport Status from \"./Status\";\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {FormControl, InputLabel} from \"@material-ui/core\";\r\n\r\nconst isMobile = window.innerWidth < 750;\r\nconst chartLayout = isMobile ? 'horizontal' : 'vertical';\r\nconst chartWidth = isMobile ? window.innerWidth : undefined;\r\nconst chartMargins = isMobile\r\n\t? {top: 20, right: 10, bottom: 30, left: 40}\r\n\t: {top: 0, right: 30, bottom: 80, left: 60};\r\n\r\nconst red = '#ff7f7f';\r\nconst yellow = '#efdea4';\r\nconst green = '#009090';\r\nconst darkGrey = '#333';\r\nconst textColor = '#c5c5c5';\r\n\r\nconst chartTheme = {\r\n  axis: {\r\n\tticks: {\r\n\t  line: {\r\n\t\tstroke: textColor,\r\n\t  },\r\n\t  text: {\r\n\t\tfill: textColor,\r\n\t\tfontFamily: 'Oswald',\r\n\t  },\r\n\t},\r\n  },\r\n  labels: {\r\n\ttext: {\r\n\t  fontFamily: 'Oswald',\r\n\t  fontWeight: 400,\r\n\t}\r\n  },\r\n  legends: {\r\n\ttext: {\r\n\t  textShadow: '1px 1px 1px #111',\r\n\t  fontFamily: 'Oswald'\r\n\t},\r\n  },\r\n  grid: {\r\n\tline: {\r\n\t  stroke: textColor,\r\n\t  strokeWidth: 1,\r\n\t  strokeDasharray: \"5 5\"\r\n\t}\r\n  },\r\n  tooltip: {\r\n\tcontainer: {\r\n\t  background: darkGrey,\r\n\t  border: `1px solid ${textColor}`,\r\n\t  fontSize: 12,\r\n\t  textShadow: '1px 1px 1px #111',\r\n\t},\r\n  },\r\n};\r\n\r\n/**\r\n * Formats chart date.\r\n * @param d\r\n */\r\nconst formatDate = (d: ReactText) => {\r\n  return moment(d).format('DD MMM');\r\n};\r\n/**\r\n * Generates chart marker lines.\r\n * @param value\r\n * @param stroke\r\n * @param legend\r\n */\r\nconst generateMarker = (value: string, stroke: string, legend: string): any => ({\r\n  axis: isMobile ? 'y' : 'x',\r\n  value,\r\n  lineStyle: {stroke, strokeWidth: 1},\r\n  legend,\r\n  textStyle: {fill: textColor, fontSize: 12, textShadow: '1px 1px 1px #111'},\r\n});\r\n/**\r\n * Generates chart tooltip.\r\n * @param t\r\n */\r\nconst chartTooltip = (t: any) => {\r\n  return (<div>\r\n\t<p>{formatDate(t.data.Date)}</p>\r\n\t<p style={{color: yellow}}>Confirmed: {t.data.Confirmed}</p>\r\n\t<p style={{color: red}}>Deaths: {t.data.Deaths}</p>\r\n\t<p style={{color: green}}>Recovered: {t.data.Recovered}</p>\r\n  </div>);\r\n};\r\n/**\r\n * Computes bar label colors.\r\n * @param c\r\n */\r\nconst labelTextColor = (c: any) => c.data.id === 'Confirmed' ? 'black' : 'white';\r\nconst axisBottom = isMobile ? undefined : {\r\n  tickRotation: 45,\r\n  format: formatDate,\r\n};\r\nconst axisTop = isMobile ? {} : undefined;\r\nconst axisLeft = isMobile ? {\r\n  tickRotation: 45,\r\n  format: formatDate,\r\n} : undefined;\r\n\r\nconst x = [{\r\n  id: 'total',\r\n  label: 'Total',\r\n}, {\r\n  id: 'growth',\r\n  label: 'Growth',\r\n}];\r\nconst children = x.map((c, i) =>\r\n\t<MenuItem\r\n\t\tkey={i}\r\n\t\tvalue={c.id}\r\n\t>\r\n\t  {c.label}\r\n\t</MenuItem>);\r\n\r\nclass Panel extends React.Component<any> {\r\n  constructor(props: any) {\r\n\tsuper(props);\r\n  }\r\n\r\n  renderChart() {\r\n\tconst barChart = <ResponsiveBar\r\n\t\tdata={this.props.data}\r\n\t\tkeys={['Recovered', 'Deaths', 'Confirmed']}\r\n\t\tcolors={[green, red, yellow]}\r\n\t\tindexBy={'Date'}\r\n\t\tlayout={chartLayout}\r\n\t\tlabelSkipHeight={10}\r\n\t\tlabelSkipWidth={10}\r\n\t\tenableGridX={isMobile}\r\n\t\tenableGridY={!isMobile}\r\n\t\tmargin={chartMargins}\r\n\t\ttheme={chartTheme}\r\n\t\taxisBottom={axisBottom}\r\n\t\taxisLeft={axisLeft}\r\n\t\taxisTop={axisTop}\r\n\t\tlabelTextColor={labelTextColor}\r\n\t\tmarkers={[\r\n\t\t  generateMarker(isMobile ? '2020-03-03T00:00:00Z' : '2020-03-04T00:00:00Z', green, 'First recoveries'),\r\n\t\t  generateMarker(isMobile ? '2020-03-15T00:00:00Z' : '2020-03-16T00:00:00Z', yellow, 'Emergency state'),\r\n\t\t  generateMarker(isMobile ? '2020-03-21T00:00:00Z' : '2020-03-22T00:00:00Z', red, 'First deaths'),\r\n\t\t  generateMarker(isMobile ? '2020-03-24T00:00:00Z' : '2020-03-25T00:00:00Z', yellow, 'Full lockdown'),\r\n\t\t]}\r\n\t\ttooltip={chartTooltip}\r\n\t\tlegends={[\r\n\t\t  {\r\n\t\t\titemTextColor: textColor,\r\n\t\t\tdataFrom: 'keys',\r\n\t\t\tanchor: 'bottom',\r\n\t\t\tdirection: 'row',\r\n\t\t\ttranslateX: 0,\r\n\t\t\ttranslateY: 70,\r\n\t\t\titemsSpacing: 0,\r\n\t\t\titemWidth: 80,\r\n\t\t\titemHeight: 20,\r\n\t\t\titemDirection: 'left-to-right',\r\n\t\t\titemOpacity: 0.85,\r\n\t\t\tsymbolSize: 10,\r\n\t\t\teffects: [\r\n\t\t\t  {\r\n\t\t\t\ton: 'hover',\r\n\t\t\t\tstyle: {\r\n\t\t\t\t  itemOpacity: 1\r\n\t\t\t\t}\r\n\t\t\t  }\r\n\t\t\t]\r\n\t\t  }\r\n\t\t]}\r\n\t/>;\r\n\t// const lineChart = <ResponsiveLine\r\n\t// \tdata={this.props.data}\r\n\t// \tcolors={[green, red, yellow]}\r\n\t// \tenableGridX={isMobile}\r\n\t// \tenableGridY={!isMobile}\r\n\t// \tmargin={chartMargins}\r\n\t// \ttheme={chartTheme}\r\n\t// />;\r\n\r\n\treturn (<div className={'chart'} style={{height: 600, width: chartWidth}}>\r\n\t  {this.props.type === 'growth' ? barChart : barChart}\r\n\t</div>);\r\n  }\r\n\r\n  render() {\r\n\t// @ts-ignore\r\n\treturn (\r\n\t\t<div>\r\n\t\t  <h3>2020 Romanian COVID-19 cases</h3>\r\n\t\t  <div style={{margin: 5}}>\r\n\t\t\t<FormControl style={{minWidth: isMobile ? '50%' : 120, textAlign: 'left'}}>\r\n\t\t\t  <InputLabel id=\"type-label\">Summary type</InputLabel>\r\n\t\t\t  <Select labelId={'type-label'} value={this.props.type} children={children} onChange={this.props.onTypeChange} />\r\n\t\t\t</FormControl>\r\n\t\t\t<Status\r\n\t\t\t\ttext={'Latest confirmed'}\r\n\t\t\t\tcurrentCount={this.props.current.Confirmed}\r\n\t\t\t\tpreviousCount={this.props.previous.Confirmed}\r\n\t\t\t/>\r\n\t\t\t<Status\r\n\t\t\t\ttext={'Latest deaths'}\r\n\t\t\t\tcurrentCount={this.props.current.Deaths}\r\n\t\t\t\tpreviousCount={this.props.previous.Deaths}\r\n\t\t\t/>\r\n\t\t\t<Status\r\n\t\t\t\treverse={true}\r\n\t\t\t\ttext={'Latest recovered'}\r\n\t\t\t\tcurrentCount={this.props.current.Recovered}\r\n\t\t\t\tpreviousCount={this.props.previous.Recovered}\r\n\t\t\t/>\r\n\t\t  </div>\r\n\t\t  {this.renderChart()}\r\n\t\t</div>\r\n\t);\r\n  }\r\n}\r\n\r\nexport default Panel;\r\n","import React from 'react';\nimport './App.css';\nimport Panel from \"./components/Panel\";\nimport moment from \"moment\";\nimport {createMuiTheme, ThemeProvider} from \"@material-ui/core\";\n\n// material-ui theme config\nconst darkTheme = createMuiTheme({\n  palette: {\n    primary: {\n\t  dark: '#efdea4',\n\t  light: '#efdea4',\n      main: '#efdea4',\n\t},\n\ttype: 'dark',\n\ttext: {\n\t  primary: '#c5c5c5',\n\t},\n\tbackground: {\n\t  // default: '#333',\n\t},\n  },\n  typography: {\n\tfontFamily: ['Oswald'].join(','),\n  },\n});\n\nexport default class extends React.Component<any, any> {\n  constructor(props: any) {\n\tsuper(props);\n\n\tthis.state = {\n\t  data: [],\n\t  current: {},\n\t  previous: {},\n\t  rawConfirmed: [],\n\t  rawRecovered: [],\n\t  rawDeaths: [],\n\t  chartType: 'growth',\n\t};\n\tthis.onTypeChange = this.onTypeChange.bind(this);\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n\t// You can also log the error to an error reporting service\n\tconsole.log(error);\n  }\n\n  componentWillMount() {\n\tthis.getData();\n  }\n\n  parseData() {\n\tconst isTotal = this.state.chartType === 'total';\n\n\tconst data = this.state.rawConfirmed.map((d: any, i: number) => {\n\t  const result = Object.assign({}, d);\n\t  result.Confirmed = !isTotal && i > 0 ? this.state.rawConfirmed[i].Cases - this.state.rawConfirmed[i - 1].Cases : this.state.rawConfirmed[i].Cases;\n\t  result.Recovered = !isTotal && i > 0 ? this.state.rawRecovered[i].Cases - this.state.rawRecovered[i - 1].Cases : this.state.rawRecovered[i].Cases;\n\t  result.Deaths = !isTotal && i > 0 ? this.state.rawDeaths[i].Cases - this.state.rawDeaths[i - 1].Cases : this.state.rawDeaths[i].Cases;\n\n\t  return result;\n\t});\n\n\tconst current = Object.assign({}, data[data.length - 1]);\n\tconst previous = Object.assign({}, data[data.length - 2]);\n\n\t// workaround to have the latest data shown\n\tdata.push({\n\t  Date: moment().add(1, 'd').toString(),\n\t});\n\n\tthis.setState({data, current, previous});\n  }\n\n  onTypeChange(e: any) {\n\tthis.setState({\n\t  chartType: e.target.value,\n\t});\n\tthis.parseData();\n  }\n\n  async getData() {\n\t// confirmed, recovered, deaths\n\tconst responseConfirmed: any = await fetch('https://api.covid19api.com/country/romania/status/confirmed/live');\n\tconst responseRecovered: any = await fetch('https://api.covid19api.com/country/romania/status/recovered/live');\n\tconst responseDeaths: any = await fetch('https://api.covid19api.com/country/romania/status/deaths/live');\n\tconst dataConfirmed: any = await responseConfirmed.json();\n\tconst dataRecovered: any = await responseRecovered.json();\n\tconst dataDeaths: any = await responseDeaths.json();\n\n\tthis.setState({\n\t  rawConfirmed: dataConfirmed,\n\t  rawRecovered: dataRecovered,\n\t  rawDeaths: dataDeaths,\n\t});\n\n\tthis.parseData();\n  }\n\n  render() {\n\treturn (\n\t\t<ThemeProvider theme={darkTheme}>\n\t\t  <div className=\"App\">\n\t\t\t<Panel data={this.state.data}\n\t\t\t\t   current={this.state.current}\n\t\t\t\t   previous={this.state.previous}\n\t\t\t\t   onTypeChange={this.onTypeChange}\n\t\t\t\t   type={this.state.chartType}\n\t\t\t/>\n\t\t\t<div className={'footer'}>\n\t\t\t  By Andrei Bucin\n\t\t\t</div>\n\t\t  </div>\n\t\t</ThemeProvider>\n\t);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}