{"version":3,"sources":["components/Panel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["isMobile","window","innerWidth","chartLayout","chartWidth","innerHeight","undefined","chartMargins","top","right","bottom","left","formatDate","d","moment","format","red","generateMarker","value","stroke","legend","axis","lineStyle","strokeWidth","textStyle","fill","fontSize","textShadow","chartTooltip","t","data","Date","style","color","Confirmed","Deaths","Recovered","labelTextColor","c","id","axisBottom","tickRotation","axisLeft","Panel","props","height","width","keys","colors","indexBy","layout","labelSkipHeight","labelSkipWidth","enableGridX","enableGridY","margin","theme","ticks","line","text","fontFamily","labels","legends","grid","strokeDasharray","tooltip","container","background","border","markers","itemTextColor","dataFrom","anchor","direction","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","state","error","errorInfo","console","log","this","getData","fetch","responseConfirmed","responseRecovered","responseDeaths","json","dataConfirmed","dataRecovered","dataDeaths","map","i","result","Object","assign","Cases","push","add","toString","setState","className","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.71dd9161.chunk.js","sourcesContent":["import React, {ReactText} from \"react\";\r\nimport moment from \"moment\";\r\nimport './Panel.css';\r\nimport {ResponsiveBar} from '@nivo/bar'\r\n\r\nconst isMobile = window.innerWidth < 750;\r\nconst chartLayout = isMobile ? 'horizontal' : 'vertical';\r\nconst chartHeight = isMobile ? window.innerHeight / 2 : 300;\r\nconst chartWidth = isMobile ? 500 : undefined;\r\nconst barSize = isMobile ? 2 : undefined;\r\nconst labelAngle = isMobile ? 90 : 45;\r\n// const chartMargins = isMobile\r\n// \t? {top: 15, right: 10, bottom: 35, left: -20}\r\n// \t: {top: 15, right: 30, bottom: 35, left: 0};\r\nconst chartMargins = isMobile\r\n\t? {top: 10, right: 130, bottom: 30, left: 40}\r\n\t: {top: 50, right: 130, bottom: 80, left: 60};\r\nconst formatDate = (d: ReactText) => {\r\n  return moment(d).format('DD.MM');\r\n};\r\nconst red = '#ff7f7f';\r\nconst yellow = '#efdea4';\r\nconst green = '#009090';\r\nconst darkGrey = '#333';\r\nconst textColor = '#c5c5c5';\r\n\r\nconst renderLabel = (d: any) => {\r\n  return d.value || '';\r\n};\r\n\r\nconst generateMarker = (value: string, stroke: string, legend: string): any => ({\r\n  axis: isMobile ? 'y' : 'x',\r\n  value,\r\n  lineStyle: {stroke, strokeWidth: 1},\r\n  legend,\r\n  textStyle: {fill: textColor, fontSize: 12, textShadow: '1px 1px 1px #111'},\r\n});\r\n\r\nconst chartTooltip = (t: any) => {\r\n  return (<div>\r\n\t<p>{formatDate(t.data.Date)}</p>\r\n\t<p style={{color: yellow}}>Confirmed: {t.data.Confirmed}</p>\r\n\t<p style={{color: red}}>Deaths: {t.data.Deaths}</p>\r\n\t<p style={{color: green}}>Recovered: {t.data.Recovered}</p>\r\n  </div>);\r\n};\r\n\r\nconst labelTextColor = (c: any) => c.data.id === 'Confirmed' ? darkGrey : 'white';\r\nconst axisBottom = isMobile ? undefined : {\r\n  tickRotation: 45,\r\n  format: formatDate,\r\n};\r\nconst axisLeft = isMobile ? {\r\n  tickRotation: 45,\r\n  format: formatDate,\r\n} : undefined;\r\n\r\nfunction Panel(props: any) {\r\n\r\n  // @ts-ignore\r\n  return (\r\n\t  <div style={{height: 600, width: chartWidth}}>\r\n\t\t<h3>2020 Romanian COVID-19 cases</h3>\r\n\t\t<ResponsiveBar\r\n\t\t\tdata={props.data}\r\n\t\t\tkeys={['Recovered', 'Deaths', 'Confirmed']}\r\n\t\t\tcolors={[green, red, yellow]}\r\n\t\t\tindexBy={'Date'}\r\n\t\t\tlayout={chartLayout}\r\n\t\t\tlabelSkipHeight={10}\r\n\t\t\tlabelSkipWidth={10}\r\n\t\t\tenableGridX={isMobile}\r\n\t\t\tenableGridY={!isMobile}\r\n\t\t\tmargin={chartMargins}\r\n\t\t\ttheme={{\r\n\t\t\t  axis: {\r\n\t\t\t\tticks: {\r\n\t\t\t\t  line: {\r\n\t\t\t\t\tstroke: textColor,\r\n\t\t\t\t  },\r\n\t\t\t\t  text: {\r\n\t\t\t\t\tfill: textColor,\r\n\t\t\t\t\tfontFamily: 'Oswald',\r\n\t\t\t\t  },\r\n\t\t\t\t},\r\n\t\t\t  },\r\n\t\t\t  labels: {\r\n\t\t\t\ttext: {\r\n\t\t\t\t  fontFamily: 'Oswald',\r\n\t\t\t\t}\r\n\t\t\t  },\r\n\t\t\t  legends: {\r\n\t\t\t\ttext: {\r\n\t\t\t\t  textShadow: '1px 1px 1px #111',\r\n\t\t\t\t  fontFamily: 'Oswald',\r\n\t\t\t\t},\r\n\t\t\t  },\r\n\t\t\t  grid: {\r\n\t\t\t\tline: {\r\n\t\t\t\t  stroke: textColor,\r\n\t\t\t\t  strokeWidth: 1,\r\n\t\t\t\t  strokeDasharray: \"5 5\"\r\n\t\t\t\t}\r\n\t\t\t  },\r\n\t\t\t  tooltip: {\r\n\t\t\t\tcontainer: {\r\n\t\t\t\t  background: darkGrey,\r\n\t\t\t\t  border: `1px solid ${textColor}`,\r\n\t\t\t\t  fontSize: 12,\r\n\t\t\t\t  textShadow: '1px 1px 1px #111',\r\n\t\t\t\t},\r\n\t\t\t  },\r\n\t\t\t}}\r\n\t\t\taxisBottom={axisBottom}\r\n\t\t\tlabelTextColor={labelTextColor}\r\n\t\t\taxisLeft={axisLeft}\r\n\t\t\tmarkers={[\r\n\t\t\t  generateMarker('2020-03-04T00:00:00Z', green, 'First recoveries'),\r\n\t\t\t  generateMarker('2020-03-16T00:00:00Z', yellow, 'Emergency state'),\r\n\t\t\t  generateMarker('2020-03-22T00:00:00Z', red, 'First deaths'),\r\n\t\t\t  generateMarker('2020-03-25T00:00:00Z', yellow, 'Full lockdown'),\r\n\t\t\t]}\r\n\t\t\ttooltip={chartTooltip}\r\n\t\t\tlegends={[\r\n\t\t\t  {\r\n\t\t\t    itemTextColor: textColor,\r\n\t\t\t\tdataFrom: 'keys',\r\n\t\t\t\tanchor: 'bottom',\r\n\t\t\t\tdirection: 'row',\r\n\t\t\t\ttranslateX: 0,\r\n\t\t\t\ttranslateY: 70,\r\n\t\t\t\titemsSpacing: 0,\r\n\t\t\t\titemWidth: 80,\r\n\t\t\t\titemHeight: 20,\r\n\t\t\t\titemDirection: 'left-to-right',\r\n\t\t\t\titemOpacity: 0.85,\r\n\t\t\t\tsymbolSize: 10,\r\n\t\t\t\teffects: [\r\n\t\t\t\t  {\r\n\t\t\t\t\ton: 'hover',\r\n\t\t\t\t\tstyle: {\r\n\t\t\t\t\t  itemOpacity: 1\r\n\t\t\t\t\t}\r\n\t\t\t\t  }\r\n\t\t\t\t]\r\n\t\t\t  }\r\n\t\t\t]}\r\n\t\t/>\r\n\r\n\t\t{/*<ResponsiveContainer width={'100%'} height={chartHeight}>*/}\r\n\t\t{/*  <ComposedChart*/}\r\n\t\t{/*\t  data={props.data}*/}\r\n\t\t{/*\t  margin={chartMargins}*/}\r\n\t\t{/*\t  style={{*/}\r\n\t\t{/*\t\tfontSize: isMobile ? 10 : 12,*/}\r\n\t\t{/*\t\tcolor: textColor,*/}\r\n\t\t{/*\t\tfontWeight: isMobile ? 300 : 400,*/}\r\n\t\t{/*\t\tletterSpacing: 0.2,*/}\r\n\t\t{/*\t  }}>*/}\r\n\t\t{/*\t<XAxis dataKey=\"Date\" tickFormatter={formatDate} interval={0} angle={labelAngle} textAnchor={'start'}*/}\r\n\t\t{/*\t\t   stroke={textColor} />*/}\r\n\t\t{/*\t<YAxis stroke={textColor} />*/}\r\n\t\t{/*\t<Tooltip labelFormatter={formatDate}*/}\r\n\t\t{/*\t\t\t contentStyle={{color: textColor, background: '#373737'}}*/}\r\n\t\t{/*\t\t\t isAnimationActive={false} />*/}\r\n\t\t{/*\t<CartesianGrid stroke={textColor} strokeDasharray={'4 4'} vertical={false} />*/}\r\n\t\t{/*\t<Legend verticalAlign={'bottom'} wrapperStyle={{bottom: 0}} />*/}\r\n\t\t{/*\t<Bar dataKey={'Recovered'} fill={green} stackId={'a'} barSize={barSize}>*/}\r\n\t\t{/*\t  <LabelList dataKey={'Recovered'} position={'insideTop'} className={'label-white'}*/}\r\n\t\t{/*\t\t\t\t content={renderLabel} />*/}\r\n\t\t{/*\t</Bar>*/}\r\n\t\t{/*\t<Bar dataKey={'Deaths'} fill={red} stackId={'a'} barSize={barSize}>*/}\r\n\t\t{/*\t  <LabelList dataKey={'Deaths'} position={'outside'} className={'label-white'}*/}\r\n\t\t{/*\t\t\t\t content={renderLabel} />*/}\r\n\t\t{/*\t</Bar>*/}\r\n\t\t{/*\t<Bar dataKey={'Confirmed'} fill={yellow} stackId={'a'} barSize={barSize}>*/}\r\n\t\t{/*\t  <LabelList dataKey={'Confirmed'} position={'insideTop'} className={'label'}*/}\r\n\t\t{/*\t\t\t\t content={renderLabel} />*/}\r\n\t\t{/*\t</Bar>*/}\r\n\t\t{/*\t<ReferenceLine x={29} stroke={yellow} label=\"Full lockdown\" className={'label-reference'} />*/}\r\n\t\t{/*\t<ReferenceLine x={26} stroke={red} label=\"First deaths\" className={'label-reference'} />*/}\r\n\t\t{/*\t<ReferenceLine x={20} stroke={yellow} label=\"Emergency state\" className={'label-reference'} />*/}\r\n\t\t{/*\t<ReferenceLine x={8} stroke={green} label=\"First recoveries\" className={'label-reference'} />*/}\r\n\t\t{/*\t/!*<Line type=\"monotone\" dataKey=\"Cases\" stroke=\"#009090\" />*!/*/}\r\n\t\t{/*  </ComposedChart>*/}\r\n\t\t{/*</ResponsiveContainer>*/}\r\n\t  </div>\r\n  );\r\n}\r\n\r\nexport default Panel;\r\n","import React from 'react';\nimport './App.css';\nimport Panel from \"./components/Panel\";\nimport moment from \"moment\";\n\nexport default class extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      data: [],\n    };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    // You can also log the error to an error reporting service\n    console.log(error);\n  }\n\n  componentWillMount() {\n    this.getData();\n  }\n\n  async getData() {\n    // confirmed, recovered, deaths\n    const responseConfirmed: any = await fetch('https://api.covid19api.com/country/romania/status/confirmed/live');\n    const responseRecovered: any = await fetch('https://api.covid19api.com/country/romania/status/recovered/live');\n    const responseDeaths: any = await fetch('https://api.covid19api.com/country/romania/status/deaths/live');\n    const dataConfirmed: any = await responseConfirmed.json();\n    const dataRecovered: any = await responseRecovered.json();\n    const dataDeaths: any = await responseDeaths.json();\n\n    const data = dataConfirmed.map((d: any, i: number) => {\n      const result = Object.assign({}, d);\n      result.Confirmed = d.Cases;\n      result.Recovered = dataRecovered[i].Cases;\n      result.Deaths = dataDeaths[i].Cases;\n\n      return result;\n    });\n\n    // workaround to have the latest data shown\n    data.push({\n      Date: moment().add(1, 'd').toString(),\n    });\n\n    this.setState({data});\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          <Panel data={this.state.data} />\n          <div className={'footer'}>\n            By Andrei Bucin\n          </div>\n        </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}