{"version":3,"sources":["components/Status.tsx","utils/ChartTheme.tsx","components/Panel.tsx","services/ChartService.tsx","utils/ChartDataMapper.tsx","utils/UiTheme.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["red","isMobile","window","innerWidth","computeNumberColor","diff","reverse","statusStyle","fontSize","display","alignItems","justifyContent","margin","Status","props","currentCount","previousCount","percent","Math","trunc","sign","className","style","text","color","htmlColor","computeIcon","chartTheme","axis","ticks","line","stroke","fill","fontFamily","labels","fontWeight","legends","textShadow","grid","strokeWidth","strokeDasharray","tooltip","container","background","border","chartLayout","chartWidth","undefined","chartHeight","chartMargins","top","right","bottom","left","formatDate","d","moment","format","generateMarker","value","legend","lineStyle","textStyle","chartTooltip","t","data","Date","Active","Deaths","Recovered","labelTextColor","c","includes","id","axisBottom","tickValues","tickRotation","axisLeft","Panel","label","map","i","MenuItem","key","barData","cloneDeep","this","lineData","barChart","keys","colors","indexBy","layout","labelSkipHeight","labelSkipWidth","padding","enableGridX","enableGridY","theme","gridYValues","gridXValues","axisTop","markers","itemTextColor","dataFrom","anchor","direction","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","lineChart","curve","pointSize","pointColor","pointBorderWidth","pointBorderColor","serieColor","isTotal","type","height","width","current","Confirmed","previous","renderChart","React","Component","ChartService","fetch","responseConfirmed","responseRecovered","responseDeaths","json","dataConfirmed","dataRecovered","dataDeaths","rawConfirmed","slice","rawRecovered","rawDeaths","ChartDataMapper","parseBarData","parseLineData","result","Cases","length","push","add","toString","mapper","console","log","x","y","darkTheme","createMuiTheme","palette","primary","dark","light","main","typography","join","state","chartType","onTypeChange","bind","error","errorInfo","getData","chartData","parseData","setState","e","target","ThemeProvider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.860a8653.chunk.js","sourcesContent":["import ArrowDropUpIcon from \"@material-ui/icons/ArrowDropUp\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport './Panel.css';\r\n\r\nimport React from \"react\";\r\n\r\nconst red = '#ff7f7f';\r\nconst yellow = '#efdea4';\r\nconst green = '#009090';\r\nconst isMobile = window.innerWidth < 750;\r\n\r\nconst computeIcon = (diff: number, reverse: boolean) => {\r\n  let icon;\r\n\r\n  if (diff > 0) {\r\n\ticon = <ArrowDropUpIcon htmlColor={reverse ? green : red} />;\r\n  } else if (diff < 0) {\r\n\ticon = <ArrowDropDownIcon htmlColor={reverse ? red : green} />;\r\n  } else {\r\n\ticon = <RemoveIcon htmlColor={yellow} />;\r\n  }\r\n\r\n  return icon;\r\n};\r\n\r\nconst computeNumberColor = (diff: number, reverse: boolean) => {\r\n  let numberColor: string = '';\r\n\r\n  if (diff > 0) {\r\n\tnumberColor = reverse ? green : red;\r\n  } else if (diff < 0) {\r\n\tnumberColor = reverse ? red : green;\r\n  } else {\r\n    numberColor = yellow;\r\n  }\r\n\r\n  return numberColor;\r\n};\r\n\r\nconst statusStyle = isMobile ? {\r\n  fontSize: isMobile ? 14 : 12,\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center'\r\n} : {margin: 5};\r\n\r\nfunction Status(props: any) {\r\n  const diff: number = (props.currentCount - props.previousCount) || 0;\r\n  // truncate to 1 decimal\r\n  const percent: number = (Math.trunc(diff * 100 / props.previousCount * 10) / 10) || 0;\r\n  const sign: string = diff > 0 ? '+' : '';\r\n\r\n  return (\r\n\t  <span className={'status'} style={statusStyle}>\r\n\t\t{props.text}: {props.currentCount} (<span style={{color: computeNumberColor(diff, props.reverse)}}>{sign}{diff} / {sign}{percent}%</span>)\r\n\t\t{computeIcon(diff, props.reverse)}\r\n\t  </span>\r\n  );\r\n}\r\n\r\nexport default Status;\r\n","const darkGrey = '#333';\r\nconst textColor = '#c5c5c5';\r\n\r\nconst chartTheme = {\r\n  axis: {\r\n\tticks: {\r\n\t  line: {\r\n\t\tstroke: textColor,\r\n\t  },\r\n\t  text: {\r\n\t\tfill: textColor,\r\n\t\tfontFamily: 'Oswald',\r\n\t  },\r\n\t},\r\n  },\r\n  labels: {\r\n\ttext: {\r\n\t  fontFamily: 'Oswald',\r\n\t  fontWeight: 400,\r\n\t}\r\n  },\r\n  legends: {\r\n\ttext: {\r\n\t  textShadow: '1px 1px 1px #111',\r\n\t  fontFamily: 'Oswald'\r\n\t},\r\n  },\r\n  grid: {\r\n\tline: {\r\n\t  stroke: textColor,\r\n\t  strokeWidth: 1,\r\n\t  strokeDasharray: \"5 5\"\r\n\t}\r\n  },\r\n  tooltip: {\r\n\tcontainer: {\r\n\t  background: darkGrey,\r\n\t  border: `1px solid ${textColor}`,\r\n\t  fontSize: 12,\r\n\t  textShadow: '1px 1px 1px #111',\r\n\t},\r\n  },\r\n};\r\n\r\nexport default chartTheme;\r\n","import React, {ReactText} from \"react\";\r\nimport moment from \"moment\";\r\nimport './Panel.css';\r\nimport {ResponsiveBar} from '@nivo/bar';\r\nimport {ResponsiveLine} from '@nivo/line';\r\nimport Status from \"./Status\";\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {FormControl, InputLabel} from \"@material-ui/core\";\r\nimport chartTheme from \"../utils/ChartTheme\";\r\nimport cloneDeep from 'lodash/cloneDeep';\r\n\r\nconst isMobile = window.innerWidth < 750;\r\nconst chartLayout = isMobile ? 'horizontal' : 'vertical';\r\nconst chartWidth = isMobile ? window.innerWidth : undefined;\r\nconst chartHeight = isMobile ? 800 : 600;\r\nconst chartMargins = isMobile\r\n\t? {top: 20, right: 10, bottom: 30, left: 40}\r\n\t: {top: 0, right: 30, bottom: 80, left: 60};\r\n\r\nconst red = '#ff7f7f';\r\nconst yellow = '#efdea4';\r\nconst green = '#009090';\r\nconst darkGrey = '#333';\r\nconst textColor = '#c5c5c5';\r\n\r\n/**\r\n * Formats chart date.\r\n * @param d\r\n */\r\nconst formatDate = (d: ReactText) => moment(d).format('DD MMM');\r\n/**\r\n * Generates chart marker lines.\r\n * @param value\r\n * @param stroke\r\n * @param legend\r\n */\r\nconst generateMarker = (value: string, stroke: string, legend: string, strokeDasharray: string = ''): any => ({\r\n  axis: isMobile ? 'y' : 'x',\r\n  value,\r\n  lineStyle: {stroke, strokeWidth: 1, strokeDasharray},\r\n  legend,\r\n  textStyle: {fill: textColor, fontSize: 12, textShadow: '1px 1px 1px #111'},\r\n});\r\n/**\r\n * Generates chart tooltip.\r\n * @param t\r\n */\r\nconst chartTooltip = (t: any) => {\r\n  return (<div>\r\n\t<p>{formatDate(t.data.Date)}</p>\r\n\t<p style={{color: yellow}}>Active: {t.data.Active}</p>\r\n\t<p style={{color: red}}>Deaths: {t.data.Deaths}</p>\r\n\t<p style={{color: green}}>Recovered: {t.data.Recovered}</p>\r\n  </div>);\r\n};\r\n/**\r\n * Computes bar label colors.\r\n * @param c\r\n */\r\nconst labelTextColor = (c: any) => ['Confirmed', 'Active'].includes(c.data.id) ? 'black' : 'white';\r\nconst axisBottom = isMobile ? {tickValues: 5} : {\r\n  tickRotation: 45,\r\n  format: formatDate,\r\n};\r\nconst axisLeft = isMobile ? {\r\n  tickRotation: 45,\r\n  format: formatDate,\r\n} : {tickValues: 5};\r\n\r\nconst typeOptions = [{\r\n  id: 'total',\r\n  label: 'Total',\r\n}, {\r\n  id: 'growth',\r\n  label: 'Growth',\r\n}];\r\nconst children = typeOptions.map((c, i) =>\r\n\t<MenuItem\r\n\t\tkey={i}\r\n\t\tvalue={c.id}\r\n\t>\r\n\t  {c.label}\r\n\t</MenuItem>);\r\n\r\nclass Panel extends React.Component<any> {\r\n  constructor(props: any) {\r\n\tsuper(props);\r\n  }\r\n\r\n  renderChart() {\r\n\tconst barData = cloneDeep(this.props.barData);\r\n\tconst lineData = cloneDeep(this.props.lineData);\r\n\tconst barChart = <ResponsiveBar\r\n\t\tdata={barData}\r\n\t\tkeys={['Recovered', 'Deaths', 'Confirmed']}\r\n\t\tcolors={[green, red, yellow]}\r\n\t\tindexBy={'Date'}\r\n\t\tlayout={chartLayout}\r\n\t\tlabelSkipHeight={isMobile ? undefined : 10}\r\n\t\tlabelSkipWidth={!isMobile ? undefined : 20}\r\n\t\tpadding={isMobile ? 0.15 : 0.1}\r\n\t\tenableGridX={isMobile}\r\n\t\tenableGridY={!isMobile}\r\n\t\tmargin={chartMargins}\r\n\t\ttheme={chartTheme}\r\n\t\taxisBottom={axisBottom}\r\n\t\t// @ts-ignore\r\n\t\tgridYValues={isMobile ? undefined : 5}\r\n\t\t// @ts-ignore\r\n\t\tgridXValues={isMobile ? 5 : undefined}\r\n\t\taxisLeft={axisLeft}\r\n\t\taxisTop={isMobile ? {tickValues: 5} : undefined}\r\n\t\tlabelTextColor={labelTextColor}\r\n\t\tmarkers={[\r\n\t\t  generateMarker(isMobile ? '2020-03-03T00:00:00Z' : '2020-03-04T00:00:00Z', green, 'First recoveries'),\r\n\t\t  generateMarker(isMobile ? '2020-03-15T00:00:00Z' : '2020-03-16T00:00:00Z', yellow, 'Emergency state'),\r\n\t\t  generateMarker(isMobile ? '2020-03-21T00:00:00Z' : '2020-03-22T00:00:00Z', red, 'First deaths'),\r\n\t\t  generateMarker(isMobile ? '2020-03-24T00:00:00Z' : '2020-03-25T00:00:00Z', yellow, 'Full lockdown'),\r\n\t\t  generateMarker(isMobile ? '2020-03-29T00:00:00Z' : '2020-03-30T00:00:00Z', yellow, 'Emergency state (+2w)', '1 1'),\r\n\t\t  generateMarker(isMobile ? '2020-04-07T00:00:00Z' : '2020-04-08T00:00:00Z', yellow, 'Full lockdown (+2w)', '1 1'),\r\n\t\t]}\r\n\t\ttooltip={chartTooltip}\r\n\t\tlegends={[\r\n\t\t  {\r\n\t\t\titemTextColor: textColor,\r\n\t\t\tdataFrom: 'keys',\r\n\t\t\tanchor: 'bottom',\r\n\t\t\tdirection: 'row',\r\n\t\t\ttranslateX: 0,\r\n\t\t\ttranslateY: 70,\r\n\t\t\titemsSpacing: 0,\r\n\t\t\titemWidth: 80,\r\n\t\t\titemHeight: 20,\r\n\t\t\titemDirection: 'left-to-right',\r\n\t\t\titemOpacity: 0.85,\r\n\t\t\tsymbolSize: 10,\r\n\t\t\teffects: [\r\n\t\t\t  {\r\n\t\t\t\ton: 'hover',\r\n\t\t\t\tstyle: {\r\n\t\t\t\t  itemOpacity: 1\r\n\t\t\t\t}\r\n\t\t\t  }\r\n\t\t\t]\r\n\t\t  }\r\n\t\t]}\r\n\t/>;\r\n\tconst lineChart = <ResponsiveLine\r\n\t\tdata={lineData}\r\n\t\tcolors={[yellow, green, red]}\r\n\t\tenableGridX={isMobile}\r\n\t\tenableGridY={!isMobile}\r\n\t\t// @ts-ignore\r\n\t\tgridYValues={isMobile ? undefined : 5}\r\n\t\t// @ts-ignore\r\n\t\tgridXValues={isMobile ? 5 : undefined}\r\n\t\t// yScale={{\r\n\t\t//   type: \"time\",\r\n\t\t//   format: \"%d %b\",\r\n\t\t//   precision: \"day\"\r\n\t\t// }}\r\n\t\tmargin={chartMargins}\r\n\t\ttheme={chartTheme}\r\n\t\tcurve={'monotoneX'}\r\n\t\taxisBottom={isMobile ? undefined : {tickRotation: 45}}\r\n\t\taxisLeft={isMobile ? {tickRotation: 45} : undefined}\r\n\t\tpointSize={isMobile ? 6 : 8}\r\n\t\tpointColor={darkGrey}\r\n\t\tpointBorderWidth={2}\r\n\t\tpointBorderColor={(d: any) => d.serieColor}\r\n\t\tmarkers={[\r\n\t\t  generateMarker(isMobile ? '03 Mar' : '04 Mar', green, 'First recoveries'),\r\n\t\t  generateMarker(isMobile ? '15 Mar' : '16 Mar', yellow, 'Emergency state'),\r\n\t\t  generateMarker(isMobile ? '21 Mar' : '22 Mar', red, 'First deaths'),\r\n\t\t  generateMarker(isMobile ? '24 Mar' : '25 Mar', yellow, 'Full lockdown'),\r\n\t\t  generateMarker(isMobile ? '29 Mar' : '30 Mar', yellow, 'Emergency state (+2w)', '1 1'),\r\n\t\t  generateMarker(isMobile ? '07 Apr' : '08 Apr', yellow, 'Full lockdown (+2w)', '1 1'),\r\n\t\t]}\r\n\t\tlegends={[\r\n\t\t  {\r\n\t\t\titemTextColor: textColor,\r\n\t\t\tanchor: 'bottom',\r\n\t\t\tdirection: 'row',\r\n\t\t\ttranslateX: 0,\r\n\t\t\ttranslateY: 70,\r\n\t\t\titemsSpacing: 0,\r\n\t\t\titemWidth: 80,\r\n\t\t\titemHeight: 20,\r\n\t\t\titemDirection: 'left-to-right',\r\n\t\t\titemOpacity: 0.85,\r\n\t\t\tsymbolSize: 10,\r\n\t\t\teffects: [\r\n\t\t\t  {\r\n\t\t\t\ton: 'hover',\r\n\t\t\t\tstyle: {\r\n\t\t\t\t  itemOpacity: 1\r\n\t\t\t\t}\r\n\t\t\t  }\r\n\t\t\t]\r\n\t\t  }\r\n\t\t]}\r\n\t/>;\r\n\r\n\tconst isTotal: boolean = this.props.type === 'total';\r\n\r\n\treturn (<div className={'chart'} style={{height: chartHeight, width: chartWidth}}>\r\n\t  {!isTotal ? lineChart : barChart}\r\n\t</div>);\r\n  }\r\n\r\n  render() {\r\n    const type = this.props.type;\r\n\r\n\t// @ts-ignore\r\n\treturn (\r\n\t\t<div>\r\n\t\t  <h3>2020 Romanian COVID-19 cases</h3>\r\n\t\t  <div style={{margin: 5}}>\r\n\t\t\t{/*<FormControl style={{minWidth: isMobile ? '50%' : 120, textAlign: 'left'}}>*/}\r\n\t\t\t{/*  <InputLabel id=\"type-label\">Summary type</InputLabel>*/}\r\n\t\t\t{/*  <Select labelId={'type-label'}*/}\r\n\t\t\t{/*\t\t  value={type}*/}\r\n\t\t\t{/*\t\t  children={children}*/}\r\n\t\t\t{/*\t\t  onChange={this.props.onTypeChange} />*/}\r\n\t\t\t{/*</FormControl>*/}\r\n\t\t\t<Status\r\n\t\t\t\ttext={'Latest confirmed'}\r\n\t\t\t\tcurrentCount={this.props.current.Confirmed}\r\n\t\t\t\tpreviousCount={this.props.previous.Confirmed}\r\n\t\t\t/>\r\n\t\t\t<Status\r\n\t\t\t\ttext={'Latest deaths'}\r\n\t\t\t\tcurrentCount={this.props.current.Deaths}\r\n\t\t\t\tpreviousCount={this.props.previous.Deaths}\r\n\t\t\t/>\r\n\t\t\t<Status\r\n\t\t\t\treverse={true}\r\n\t\t\t\ttext={'Latest recovered'}\r\n\t\t\t\tcurrentCount={this.props.current.Recovered}\r\n\t\t\t\tpreviousCount={this.props.previous.Recovered}\r\n\t\t\t/>\r\n\t\t  </div>\r\n\t\t  {this.renderChart()}\r\n\t\t</div>\r\n\t);\r\n  }\r\n}\r\n\r\nexport default Panel;\r\n","export default class ChartService {\r\n  static async getData() {\r\n\tconst responseConfirmed: any = await fetch('https://api.covid19api.com/country/romania/status/confirmed/live');\r\n\tconst responseRecovered: any = await fetch('https://api.covid19api.com/country/romania/status/recovered/live');\r\n\tconst responseDeaths: any = await fetch('https://api.covid19api.com/country/romania/status/deaths/live');\r\n\tconst dataConfirmed: any = await responseConfirmed.json();\r\n\tconst dataRecovered: any = await responseRecovered.json();\r\n\tconst dataDeaths: any = await responseDeaths.json();\r\n\r\n\treturn {\r\n\t  rawConfirmed: dataConfirmed.slice(40),\r\n\t  rawRecovered: dataRecovered.slice(40),\r\n\t  rawDeaths: dataDeaths.slice(40),\r\n\t};\r\n  }\r\n}\r\n","import moment from \"moment\";\r\nimport cloneDeep from 'lodash/cloneDeep';\r\n\r\nexport default class ChartDataMapper {\r\n  static parseData({rawConfirmed, rawRecovered, rawDeaths, isTotal}:\r\n\t\t\t\t\t   { rawConfirmed: any, rawRecovered: any, rawDeaths: any, isTotal: boolean }) {\r\n\t// const data = rawConfirmed.map((d: any, i: number) => {\r\n\t//   const result = Object.assign({}, d);\r\n\t//   const isDiff: boolean = !isTotal && i > 0;\r\n\t//\r\n\t//   result.Confirmed = isDiff ? rawConfirmed[i].Cases - rawConfirmed[i - 1].Cases : rawConfirmed[i].Cases;\r\n\t//   result.Recovered = isDiff ? rawRecovered[i].Cases - rawRecovered[i - 1].Cases : rawRecovered[i].Cases;\r\n\t//   result.Deaths = isDiff ? rawDeaths[i].Cases - rawDeaths[i - 1].Cases : rawDeaths[i].Cases;\r\n\t//\r\n\t//   return result;\r\n\t// });\r\n\t//\r\n\t// const current = Object.assign({}, data[data.length - 1]);\r\n\t// const previous = Object.assign({}, data[data.length - 2]);\r\n\t//\r\n\t// // workaround to have the latest data shown\r\n\t// data.push({\r\n\t//   Date: moment().add(1, 'd').toString(),\r\n\t// });\r\n\r\n\treturn isTotal\r\n\t\t? this.parseBarData({rawConfirmed, rawRecovered, rawDeaths})\r\n\t\t: this.parseLineData({rawConfirmed, rawRecovered, rawDeaths});\r\n  }\r\n\r\n  private static parseBarData({rawConfirmed, rawRecovered, rawDeaths}:\r\n\t\t\t\t\t\t\t\t  { rawConfirmed: any, rawRecovered: any, rawDeaths: any }) {\r\n\tconst data = rawConfirmed.map((d: any, i: number) => {\r\n\t  const result = cloneDeep(d);\r\n\r\n\t  result.Confirmed = rawConfirmed[i].Cases;\r\n\t  result.Recovered = rawRecovered[i].Cases;\r\n\t  result.Deaths = rawDeaths[i].Cases;\r\n\r\n\t  return result;\r\n\t});\r\n\r\n\tconst current = cloneDeep(data[data.length - 1]);\r\n\tconst previous = cloneDeep(data[data.length - 2]);\r\n\r\n\t// workaround to have the latest data shown\r\n\tdata.push({\r\n\t  Date: moment().add(1, 'd').toString(),\r\n\t});\r\n\r\n\treturn {barData: data, current, previous};\r\n  }\r\n\r\n  private static parseLineData({rawConfirmed, rawRecovered, rawDeaths}:\r\n\t\t\t\t\t\t\t\t   { rawConfirmed: any, rawRecovered: any, rawDeaths: any }) {\r\n\tconst mappedConfirmed = rawConfirmed.map(this.mapper);\r\n\tconst mappedRecovered = rawRecovered.map(this.mapper);\r\n\tconst mappedDeaths = rawDeaths.map(this.mapper);\r\n\r\n\tconst data: any = [{\r\n\t  id: 'confirmed',\r\n\t  data: mappedConfirmed,\r\n\t}, {\r\n\t  id: 'recovered',\r\n\t  data: mappedRecovered,\r\n\t}, {\r\n\t  id: 'deaths',\r\n\t  data: mappedDeaths,\r\n\t}];\r\n\r\n\tconst current = cloneDeep(data[data.length - 1]);\r\n\tconst previous = cloneDeep(data[data.length - 2]);\r\nconsole.log(data);\r\n\treturn {lineData: data, current, previous};\r\n  }\r\n\r\n  private static mapper(d: any) {\r\n\tconst isMobile = window.innerWidth < 750;\r\n\r\n\treturn {\r\n\t  x: isMobile ? d.Cases : moment(d.Date).format('DD MMM'),\r\n\t  y: isMobile ? moment(d.Date).format('DD MMM') : d.Cases\r\n\t};\r\n  }\r\n}\r\n","import {createMuiTheme} from \"@material-ui/core\";\r\n\r\n// material-ui theme config\r\nconst darkTheme = createMuiTheme({\r\n  palette: {\r\n\tprimary: {\r\n\t  dark: '#efdea4',\r\n\t  light: '#efdea4',\r\n\t  main: '#efdea4',\r\n\t},\r\n\ttype: 'dark',\r\n\ttext: {\r\n\t  primary: '#c5c5c5',\r\n\t},\r\n\tbackground: {\r\n\t  // default: '#333',\r\n\t},\r\n  },\r\n  typography: {\r\n\tfontFamily: ['Oswald'].join(','),\r\n  },\r\n});\r\n\r\nexport default darkTheme;\r\n","import React from 'react';\nimport './App.css';\nimport Panel from \"./components/Panel\";\nimport {ThemeProvider} from \"@material-ui/core\";\nimport ChartService from \"./services/ChartService\";\nimport ChartDataMapper from \"./utils/ChartDataMapper\";\nimport darkTheme from \"./utils/UiTheme\";\n\nexport default class extends React.Component<any, any> {\n  constructor(props: any) {\n\tsuper(props);\n\n\tthis.state = {\n\t  barData: [],\n\t  lineData: [],\n\t  current: {},\n\t  previous: {},\n\t  rawConfirmed: [],\n\t  rawRecovered: [],\n\t  rawDeaths: [],\n\t  chartType: 'total',\n\t};\n\tthis.onTypeChange = this.onTypeChange.bind(this);\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n\t// You can also log the error to an error reporting service\n\tconsole.log(error);\n  }\n\n  componentWillMount() {\n\tthis.getData();\n  }\n\n  parseData() {\n\tconst isTotal = this.state.chartType === 'total';\n\tconst chartData: any = ChartDataMapper.parseData({\n\t  rawConfirmed: this.state.rawConfirmed,\n\t  rawRecovered: this.state.rawRecovered,\n\t  rawDeaths: this.state.rawDeaths,\n\t  isTotal\n\t});\n\n\tthis.setState({\n\t  ...chartData,\n\t});\n  }\n\n  onTypeChange(e: any) {\n\tthis.setState({\n\t  chartType: e.target.value,\n\t});\n\tthis.getData();\n  }\n\n  async getData() {\n    const chartData: any = await ChartService.getData();\n\n\tthis.setState(chartData);\n\tthis.parseData();\n  }\n\n  render() {\n\treturn (\n\t\t<ThemeProvider theme={darkTheme}>\n\t\t  <div className=\"App\">\n\t\t\t<Panel\n\t\t\t\t   barData={this.state.barData}\n\t\t\t\t   lineData={this.state.lineData}\n\t\t\t\t   current={this.state.current}\n\t\t\t\t   previous={this.state.previous}\n\t\t\t\t   onTypeChange={this.onTypeChange}\n\t\t\t\t   type={this.state.chartType}\n\t\t\t/>\n\t\t\t<div className={'footer'}>\n\t\t\t  By Andrei Bucin\n\t\t\t</div>\n\t\t  </div>\n\t\t</ThemeProvider>\n\t);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}