{"version":3,"sources":["components/Status.tsx","components/Panel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Status","props","diff","currentCount","previousCount","percent","Math","trunc","sign","numberColor","className","text","style","color","htmlColor","computeIcon","isMobile","window","innerWidth","chartLayout","chartWidth","undefined","chartMargins","top","right","bottom","left","chartTheme","axis","ticks","line","stroke","fill","fontFamily","labels","fontWeight","legends","textShadow","grid","strokeWidth","strokeDasharray","tooltip","container","background","border","fontSize","formatDate","d","moment","format","generateMarker","value","legend","lineStyle","textStyle","chartTooltip","t","data","Date","Confirmed","Deaths","Recovered","labelTextColor","c","id","axisBottom","tickRotation","axisTop","axisLeft","Panel","current","previous","height","width","keys","colors","indexBy","layout","labelSkipHeight","labelSkipWidth","enableGridX","enableGridY","margin","theme","markers","itemTextColor","dataFrom","anchor","direction","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","state","error","errorInfo","console","log","this","getData","fetch","responseConfirmed","responseRecovered","responseDeaths","json","dataConfirmed","dataRecovered","dataDeaths","map","i","result","Object","assign","Cases","length","push","add","toString","setState","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c9182c47.chunk.js","sourcesContent":["import ArrowDropUpIcon from \"@material-ui/icons/ArrowDropUp\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport './Panel.css';\r\n\r\nimport React from \"react\";\r\n\r\nconst red = '#ff7f7f';\r\nconst yellow = '#efdea4';\r\nconst green = '#009090';\r\n\r\nconst computeIcon = (diff: number) => {\r\n  let icon;\r\n\r\n  if (diff > 0) {\r\n    icon = <ArrowDropUpIcon htmlColor={red} />;\r\n  } else if (diff < 0) {\r\n\ticon = <ArrowDropDownIcon htmlColor={green} />;\r\n  } else {\r\n    icon = <RemoveIcon htmlColor={yellow} />;\r\n  }\r\n\r\n  return icon;\r\n};\r\n\r\nfunction Status(props: any) {\r\n  const diff: number = props.currentCount - props.previousCount || 0;\r\n  // truncate to 1 decimal\r\n  const percent: number = Math.trunc(diff * 100 / props.previousCount * 10) / 10;\r\n  const sign: string = diff > 0 ? '+' : '';\r\n  const numberColor: string = diff > 0 ? red : green;\r\n\r\n  return (\r\n\t  <span className={'label status'}>\r\n\t\t{props.text}: {props.currentCount} (<span style={{color: numberColor}}>{sign}{diff} / {sign}{percent}%</span>)\r\n\t\t{computeIcon(diff)}\r\n\t  </span>\r\n  );\r\n}\r\n\r\nexport default Status;\r\n","import React, {ReactText} from \"react\";\r\nimport moment from \"moment\";\r\nimport './Panel.css';\r\nimport {ResponsiveBar} from '@nivo/bar';\r\nimport Status from \"./Status\";\r\n\r\nconst isMobile = window.innerWidth < 750;\r\nconst chartLayout = isMobile ? 'horizontal' : 'vertical';\r\nconst chartWidth = isMobile ? window.innerWidth : undefined;\r\nconst chartMargins = isMobile\r\n\t? {top: 20, right: 10, bottom: 30, left: 40}\r\n\t: {top: 0, right: 30, bottom: 80, left: 60};\r\n\r\nconst red = '#ff7f7f';\r\nconst yellow = '#efdea4';\r\nconst green = '#009090';\r\nconst darkGrey = '#333';\r\nconst textColor = '#c5c5c5';\r\n\r\nconst chartTheme = {\r\n  axis: {\r\n\tticks: {\r\n\t  line: {\r\n\t\tstroke: textColor,\r\n\t  },\r\n\t  text: {\r\n\t\tfill: textColor,\r\n\t\tfontFamily: 'Oswald',\r\n\t  },\r\n\t},\r\n  },\r\n  labels: {\r\n\ttext: {\r\n\t  fontFamily: 'Oswald',\r\n\t  fontWeight: 400,\r\n\t}\r\n  },\r\n  legends: {\r\n\ttext: {\r\n\t  textShadow: '1px 1px 1px #111',\r\n\t  fontFamily: 'Oswald'\r\n\t},\r\n  },\r\n  grid: {\r\n\tline: {\r\n\t  stroke: textColor,\r\n\t  strokeWidth: 1,\r\n\t  strokeDasharray: \"5 5\"\r\n\t}\r\n  },\r\n  tooltip: {\r\n\tcontainer: {\r\n\t  background: darkGrey,\r\n\t  border: `1px solid ${textColor}`,\r\n\t  fontSize: 12,\r\n\t  textShadow: '1px 1px 1px #111',\r\n\t},\r\n  },\r\n};\r\n\r\n/**\r\n * Formats chart date.\r\n * @param d\r\n */\r\nconst formatDate = (d: ReactText) => {\r\n  return moment(d).format('DD.MM');\r\n};\r\n/**\r\n * Generates chart marker lines.\r\n * @param value\r\n * @param stroke\r\n * @param legend\r\n */\r\nconst generateMarker = (value: string, stroke: string, legend: string): any => ({\r\n  axis: isMobile ? 'y' : 'x',\r\n  value,\r\n  lineStyle: {stroke, strokeWidth: 1},\r\n  legend,\r\n  textStyle: {fill: textColor, fontSize: 12, textShadow: '1px 1px 1px #111'},\r\n});\r\n/**\r\n * Generates chart tooltip.\r\n * @param t\r\n */\r\nconst chartTooltip = (t: any) => {\r\n  return (<div>\r\n\t<p>{formatDate(t.data.Date)}</p>\r\n\t<p style={{color: yellow}}>Confirmed: {t.data.Confirmed}</p>\r\n\t<p style={{color: red}}>Deaths: {t.data.Deaths}</p>\r\n\t<p style={{color: green}}>Recovered: {t.data.Recovered}</p>\r\n  </div>);\r\n};\r\n/**\r\n * Computes bar label colors.\r\n * @param c\r\n */\r\nconst labelTextColor = (c: any) => c.data.id === 'Confirmed' ? 'black' : 'white';\r\nconst axisBottom = isMobile ? undefined : {\r\n  tickRotation: 45,\r\n  format: formatDate,\r\n};\r\nconst axisTop = isMobile ? {} : undefined;\r\nconst axisLeft = isMobile ? {\r\n  tickRotation: 45,\r\n  format: formatDate,\r\n} : undefined;\r\n\r\nfunction Panel(props: any) {\r\n\r\n  // @ts-ignore\r\n  return (\r\n\t  <div>\r\n\t\t<h3>2020 Romanian COVID-19 cases</h3>\r\n\t\t<Status\r\n\t\t\ttext={'Confirmed'}\r\n\t\t\tcurrentCount={props.current.Confirmed}\r\n\t\t\tpreviousCount={props.previous.Confirmed}\r\n\t\t/>\r\n\t\t<Status\r\n\t\t\ttext={'Deaths'}\r\n\t\t\tcurrentCount={props.current.Deaths}\r\n\t\t\tpreviousCount={props.previous.Deaths}\r\n\t\t/>\r\n\t\t<Status\r\n\t\t\ttext={'Recovered'}\r\n\t\t\tcurrentCount={props.current.Recovered}\r\n\t\t\tpreviousCount={props.previous.Recovered}\r\n\t\t/>\r\n\t\t<div className={'chart-bar'} style={{height: 600, width: chartWidth}}>\r\n\t\t  <ResponsiveBar\r\n\t\t\t  data={props.data}\r\n\t\t\t  keys={['Recovered', 'Deaths', 'Confirmed']}\r\n\t\t\t  colors={[green, red, yellow]}\r\n\t\t\t  indexBy={'Date'}\r\n\t\t\t  layout={chartLayout}\r\n\t\t\t  labelSkipHeight={10}\r\n\t\t\t  labelSkipWidth={10}\r\n\t\t\t  enableGridX={isMobile}\r\n\t\t\t  enableGridY={!isMobile}\r\n\t\t\t  margin={chartMargins}\r\n\t\t\t  theme={chartTheme}\r\n\t\t\t  axisBottom={axisBottom}\r\n\t\t\t  axisLeft={axisLeft}\r\n\t\t\t  axisTop={axisTop}\r\n\t\t\t  labelTextColor={labelTextColor}\r\n\t\t\t  markers={[\r\n\t\t\t\tgenerateMarker('2020-03-04T00:00:00Z', green, 'First recoveries'),\r\n\t\t\t\tgenerateMarker('2020-03-16T00:00:00Z', yellow, 'Emergency state'),\r\n\t\t\t\tgenerateMarker('2020-03-22T00:00:00Z', red, 'First deaths'),\r\n\t\t\t\tgenerateMarker('2020-03-25T00:00:00Z', yellow, 'Full lockdown'),\r\n\t\t\t  ]}\r\n\t\t\t  tooltip={chartTooltip}\r\n\t\t\t  legends={[\r\n\t\t\t\t{\r\n\t\t\t\t  itemTextColor: textColor,\r\n\t\t\t\t  dataFrom: 'keys',\r\n\t\t\t\t  anchor: 'bottom',\r\n\t\t\t\t  direction: 'row',\r\n\t\t\t\t  translateX: 0,\r\n\t\t\t\t  translateY: 70,\r\n\t\t\t\t  itemsSpacing: 0,\r\n\t\t\t\t  itemWidth: 80,\r\n\t\t\t\t  itemHeight: 20,\r\n\t\t\t\t  itemDirection: 'left-to-right',\r\n\t\t\t\t  itemOpacity: 0.85,\r\n\t\t\t\t  symbolSize: 10,\r\n\t\t\t\t  effects: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t  on: 'hover',\r\n\t\t\t\t\t  style: {\r\n\t\t\t\t\t\titemOpacity: 1\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t}\r\n\t\t\t\t  ]\r\n\t\t\t\t}\r\n\t\t\t  ]}\r\n\t\t  />\r\n\t\t</div>\r\n\t  </div>\r\n  );\r\n}\r\n\r\nexport default Panel;\r\n","import React from 'react';\nimport './App.css';\nimport Panel from \"./components/Panel\";\nimport moment from \"moment\";\n\nexport default class extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      data: [],\n      current: {},\n      previous: {},\n    };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    // You can also log the error to an error reporting service\n    console.log(error);\n  }\n\n  componentWillMount() {\n    this.getData();\n  }\n\n  async getData() {\n    // confirmed, recovered, deaths\n    const responseConfirmed: any = await fetch('https://api.covid19api.com/country/romania/status/confirmed/live');\n    const responseRecovered: any = await fetch('https://api.covid19api.com/country/romania/status/recovered/live');\n    const responseDeaths: any = await fetch('https://api.covid19api.com/country/romania/status/deaths/live');\n    const dataConfirmed: any = await responseConfirmed.json();\n    const dataRecovered: any = await responseRecovered.json();\n    const dataDeaths: any = await responseDeaths.json();\n\n    const data = dataConfirmed.map((d: any, i: number) => {\n      const result = Object.assign({}, d);\n      result.Confirmed = d.Cases;\n      result.Recovered = dataRecovered[i].Cases;\n      result.Deaths = dataDeaths[i].Cases;\n\n      return result;\n    });\n\n    const current = Object.assign({}, data[data.length - 1]);\n    const previous = Object.assign({}, data[data.length - 2]);\n\n    // workaround to have the latest data shown\n    data.push({\n      Date: moment().add(1, 'd').toString(),\n    });\n\n    this.setState({data, current, previous});\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          <Panel data={this.state.data} current={this.state.current} previous={this.state.previous} />\n          <div className={'footer'}>\n            By Andrei Bucin\n          </div>\n        </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}